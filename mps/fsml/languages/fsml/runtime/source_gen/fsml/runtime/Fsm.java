package fsml.runtime;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public class Fsm implements FsmlObservation {
  private List<State> states = ListSequence.fromList(new LinkedList<State>());
  private List<Transition> transitions = ListSequence.fromList(new LinkedList<Transition>());
  public Fsm(List<State> states, List<Transition> transitions) {
    this.states = states;
    this.transitions = transitions;
  }
  public List<State> getStates() {
    return states;
  }
  public List<Transition> getTranss() {
    return transitions;
  }
  public String getInitial() {
    for (State s : ListSequence.fromList(states)) {
      if (s.isInitial()) {
        return s.getState();
      }
    }
    throw new FsmlException();
  }
  public String getAction(String state, String event) {
    for (Transition t : ListSequence.fromList(transitions)) {
      if (t.getSource().equals(state) && t.getEvent().equals(event)) {
        return t.getAction();
      }
    }
    throw new FsmlException();
  }
  public String getTarget(String state, String event) {
    for (Transition t : ListSequence.fromList(transitions)) {
      if (t.getSource().equals(state) && t.getEvent().equals(event)) {
        return t.getTarget();
      }
    }
    throw new FsmlException();
  }
}
